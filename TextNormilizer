using Microsoft.Playwright;
using System.Net.Http;
using System.Text.Json;
using WikiTest.Domain;

namespace WikiTest.Infrastructure
{
    public class WikiPageAdapter : IWikiPageService
    {
        private readonly IPage _page;
        private readonly HttpClient _httpClient;
        private const string Url = "https://en.wikipedia.org/wiki/Playwright_(software)";

        public WikiPageAdapter(IPage page, HttpClient httpClient)
        {
            _page = page;
            _httpClient = httpClient;
        }

        public async Task<string> GetDebuggingSectionTextAsync()
        {
            await _page.GotoAsync(Url);
            var locator = _page.Locator("//h2[contains(.,'Debugging features')]//following-sibling::p | //h2[contains(.,'Debugging features')]//following-sibling::ul");
            var texts = await locator.AllInnerTextsAsync();
            return string.Join(" ", texts);
        }

        public async Task<bool> AreTechLinksValidAsync()
        {
            await _page.GotoAsync(Url);
            var techSection = _page.Locator("#Microsoft_development_tools");
            var links = await techSection.Locator("a").AllAsync();
            foreach (var link in links)
            {
                if (string.IsNullOrEmpty(await link.GetAttributeAsync("href")))
                    return false;
            }
            return true;
        }

        public async Task SwitchToDarkModeAsync()
        {
            await _page.GotoAsync(Url);
            var appearance = _page.Locator("//div[contains(@class,'vector-appearance-dropdown')]");
            var darkMode = _page.Locator("[data-mw-skin='vector-night-mode']");
            await appearance.ClickAsync();
            await darkMode.ClickAsync();
        }

        public async Task<bool> IsDarkModeActiveAsync()
        {
            var bodyClass = await _page.EvalOnSelectorAsync<string>("body", "el => el.className");
            return bodyClass.Contains("skin-theme-clientpref-night");
        }

        public async Task<WikiSection> GetSectionByTitleAsync(string title)
        {
            var sectionUrl = "https://en.wikipedia.org/w/api.php?action=parse&page=Playwright_(software)&prop=sections&format=json";
            var sectionJson = await _httpClient.GetStringAsync(sectionUrl);
            var sectionData = JsonSerializer.Deserialize<WikiSectionsResponse>(sectionJson);
            var section = sectionData.Parse.Sections.FirstOrDefault(s => s.Line == title);

            if (section == null)
                throw new Exception($"Section '{title}' not found");

            var apiUrl = $"https://en.wikipedia.org/w/api.php?action=parse&page=Playwright_(software)&section={section.Index}&prop=text&format=json";
            var apiJson = await _httpClient.GetStringAsync(apiUrl);
            var apiData = JsonSerializer.Deserialize<WikiParseResponse>(apiJson);

            return new WikiSection
            {
                Index = section.Index,
                Title = section.Line,
                Content = apiData.Parse.Text["*"]
            };
        }

        private class WikiParseResponse
        {
            public Parse Parse { get; set; }
        }

        private class Parse
        {
            public string Title { get; set; }
            public Dictionary<string, string> Text { get; set; }
        }

        private class WikiSectionsResponse
        {
            public ParseSections Parse { get; set; }
        }

        private class ParseSections
        {
            public List<Section> Sections { get; set; }
        }

        private class Section
        {
            public int Index { get; set; }
            public string Line { get; set; }
        }
    }
}
