using NUnit.Framework;
using WikiTest.Application;
using WikiTest.Infrastructure;
using WikiTest.Domain;
using ExtentReports;
using ExtentReports.Reporter;
using System.Threading.Tasks;

namespace WikiTest.Tests
{
    [TestFixture]
    public class WikiPageServiceTests
    {
        private WikiPageService _service;
        private static ExtentReports _extent;
        private ExtentTest _test;

        [OneTimeSetUp]
        public static void SetupReport()
        {
            var htmlReporter = new ExtentHtmlReporter("TestReport.html");
            _extent = new ExtentReports();
            _extent.AttachReporter(htmlReporter);
        }

        [SetUp]
        public void Setup()
        {
            var wikiPageService = new WikiPageServiceImpl();
            var textNormalizer = new TextNormalizer();
            _service = new WikiPageService(wikiPageService, textNormalizer);
            _test = _extent.CreateTest(TestContext.CurrentContext.Test.Name);
        }

        [Test]
        public async Task CompareDebuggingWordsAsync_ReturnsTrue_WhenWordsMatch()
        {
            var result = await _service.CompareDebuggingWordsAsync();
            Assert.IsTrue(result, "The count of unique words in UI and API texts should match.");
            _test.Pass("Debugging words comparison test passed.");
        }

        [Test]
        public async Task ValidateTechLinksAsync_ReturnsTrue_WhenAllLinksValid()
        {
            var result = await _service.ValidateTechLinksAsync();
            Assert.IsTrue(result, "All technology names should be valid links.");
            _test.Pass("Technology links validation test passed.");
        }

        [Test]
        public async Task SwitchAndVerifyDarkModeAsync_ReturnsTrue_WhenDarkModeActive()
        {
            var result = await _service.SwitchAndVerifyDarkModeAsync();
            Assert.IsTrue(result, "Dark mode should be active after switching.");
            _test.Pass("Dark mode switch and verification test passed.");
        }

        [TearDown]
        public void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == NUnit.Framework.Interfaces.TestStatus.Failed)
            {
                _test.Fail(TestContext.CurrentContext.Result.Message);
            }
            _extent.Flush();
        }
    }
}
