using WikiTest.Domain;
using Microsoft.Playwright;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

namespace WikiTest.Infrastructure
{
    public class WikiPageServiceImpl : IWikiPageService
    {
        private readonly IPlaywright _playwright;
        private readonly IBrowser _browser;
        private readonly HttpClient _httpClient;

        public WikiPageServiceImpl()
        {
            _playwright = Playwright.CreateAsync().GetAwaiter().GetResult();
            _browser = _playwright.Chromium.LaunchAsync(new() { Headless = true }).GetAwaiter().GetResult();
            _httpClient = new HttpClient();
        }

        public async Task<string> GetDebuggingSectionTextAsync()
        {
            var page = await _browser.NewPageAsync();
            await page.GotoAsync("https://en.wikipedia.org/wiki/Playwright_(software)");
            var debuggingSection = await page.Locator("h2:has-text('Debugging features') ~ p").First.TextContentAsync();
            await page.CloseAsync();
            return debuggingSection ?? string.Empty;
        }

        public async Task<WikiSection> GetSectionByTitleAsync(string title)
        {
            var response = await _httpClient.GetAsync($"https://en.wikipedia.org/w/api.php?action=parse&page=Playwright_(software)&prop=wikitext&sectiontitle={title}&format=json");
            var content = await response.Content.ReadAsStringAsync();
            using var jsonDoc = JsonDocument.Parse(content);
            var wikitext = jsonDoc.RootElement.GetProperty("parse").GetProperty("wikitext").GetProperty("*").GetString();
            return new WikiSection { Title = title, Content = wikitext ?? string.Empty };
        }

        public async Task<bool> AreTechLinksValidAsync()
        {
            var page = await _browser.NewPageAsync();
            await page.GotoAsync("https://en.wikipedia.org/wiki/Playwright_(software)");
            var techLinks = await page.Locator("h3:has-text('Microsoft development tools') ~ ul li a").AllAsync();

            foreach (var link in techLinks)
            {
                var href = await link.GetAttributeAsync("href");
                if (string.IsNullOrEmpty(href) || href == "#")
                    return false;
            }

            await page.CloseAsync();
            return true;
        }

        public async Task SwitchToDarkModeAsync()
        {
            var page = await _browser.NewPageAsync();
            await page.GotoAsync("https://en.wikipedia.org/wiki/Playwright_(software)");
            await page.Locator("a[title='Switch to dark mode']").ClickAsync();
            await page.CloseAsync();
        }

        public async Task<bool> IsDarkModeActiveAsync()
        {
            var page = await _browser.NewPageAsync();
            await page.GotoAsync("https://en.wikipedia.org/wiki/Playwright_(software)");
            var isDarkMode = await page.Locator("html.mw-dark-mode").IsVisibleAsync();
            await page.CloseAsync();
            return isDarkMode;
        }
    }
}
